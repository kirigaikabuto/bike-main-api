// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (name, price)
VALUES ($1, $2)
    RETURNING id, name, price
`

type CreateBookParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.Name, arg.Price)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const getBookById = `-- name: GetBookById :one
SELECT id, name, price FROM books WHERE id = $1
`

func (q *Queries) GetBookById(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBookById, id)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, price FROM books ORDER BY id
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
